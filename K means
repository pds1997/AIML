from sklearn.cluster import KMeans
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from matplotlib import pyplot as plt
%matplotlib inline


from sklearn.datasets import load_iris

iris = load_iris()

iris

df = pd.DataFrame(iris.data,columns=iris.feature_names)
df.head()

df.drop(['sepal length (cm)','sepal width (cm)'],axis ='columns', inplace=True)


plt.scatter(df['petal length (cm)'],df['petal width (cm)'])

km = KMeans(n_clusters=3)
yp = km.fit_predict(df)

yp

df['cluster'] = yp

df

df1 = df[df.cluster==0]
df2 = df[df.cluster==1]
df3 = df[df.cluster==2]

df1

plt.scatter(df1['petal length (cm)'],df1['petal width (cm)'],color='blue')
plt.scatter(df2['petal length (cm)'],df2['petal width (cm)'],color='green')
plt.scatter(df3['petal length (cm)'],df3['petal width (cm)'],color='yellow')


Scaler = MinMaxScaler()

Scaler.fit(df[['petal length (cm)']])
df['petal length (cm)'] = Scaler.transform(df[['petal length (cm)']])

Scaler.fit(df[['petal width (cm)']])
df['petal width (cm)'] = Scaler.transform(df[['petal width (cm)']])

df.head()

plt.scatter(df['petal length (cm)'],df['petal width (cm)'])

km1 = KMeans(n_clusters=3)
yp1 = km.fit_predict(df)

df['cluster'] = yp1

df

df1 = df[df.cluster==0]
df2 = df[df.cluster==1]
df3 = df[df.cluster==2]


plt.scatter(df1['petal length (cm)'],df1['petal width (cm)'],color='blue')
plt.scatter(df2['petal length (cm)'],df2['petal width (cm)'],color='green')
plt.scatter(df3['petal length (cm)'],df3['petal width (cm)'],color='yellow')

sse =[]
k_rng = range(1,10)
for k in k_rng:
    km = KMeans(n_clusters=k)
    km.fit(df)
    sse.append(km.inertia_)

plt.xlabel('K')
plt.ylabel('Sum of squared error')
plt.plot(k_rng,sse)

